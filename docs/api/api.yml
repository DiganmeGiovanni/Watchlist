openapi: 3.0.0
info:
  title: Watchlist API
  version: "1.0"
  description: >-
    Openapi documentation for endpoints being exposed by watchlist

    ### About authentication

    Every endpoint listed below (except `auth/login`) must be invoked using
    http basic auth through a request header like `Authorization: Bearer <token>`.

    In order to get a valid token you must first make a request to the
    `auth/login` endpoint using a valid facebook token, you can get one
    for development at
    [https://developers.facebook.com/tools/explorer/](https://developers.facebook.com/tools/explorer/)
    and by clicking the `Generate token` button

servers:
- url: http:localhost:8081/api
  description: Development server

paths:
  /auth/login:
    post:
      tags:
      - Authorization
      summary: Authenticates/Registers a user
      description: >-
        Validates provided oauth token for indicated auth provider, then
        if there's no user with provided email, it will be registered as a new
        user. Finally a jwt and a user object will be returned as response

        NOTE: A "default" watchlist will be created during user's creation
      requestBody:
        description: User oauth credentials and data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Login request result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /user/{userId}/lists:
    get:
      tags:
      - Lists
      summary: Retrieves all the watchlists for specified user
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: An array with all user lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Watchlist'
        '403':
          description: Current user can not access indicated user lists
        '404':
          description: Given user id does not exists
    post:
      tags:
      - Lists
      summary: Creates a new list for user
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: |
          The watchlist to be created

          *Note: Watchlist id will be generated by server hence is not required
          as part of request body*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watchlist'
      responses:
        '200':
          description: The created watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watchlist'
        '400':
          description: |
            Posted entity thrown validation errors.

            Note: A single user can not have multiple lists with same name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
        '403':
          description: Unauthorized, current user can not modify indicated user lists
        '404':
          description: Given user id does not exists

  /lists/{listId}/movies:
    get:
      tags:
      - List's content
      summary: Retrieves content of specified list
      parameters:
      - name: id
        in: path
        description: Watchlist id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: An array containing all movies in list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WatchlistHasMovie'
        '403':
          description: Unauthorized, current user can not access watchlist
        '404':
          description: Indicated watchlist does not exists
    post:
      tags:
      - List's content
      summary: Adds the specified movie to this list
      description: |
        Adds a movie to this list \
        NOTE: Movie details will be fetched from "The movie database"
        along with its crew, pictures and genres. So only 'The movie database
        id' is required
      parameters:
      - name: id
        in: path
        description: Id oflist
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoviePost'
      responses:
        '200':
          description: >-
            The created 'watchlist has movie' object. You can use this
            to refresh the rendered watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistHasMovie'
        '403':
          description: Unauthorized, current user can not access watchlist
        '404':
          description: Indicated watchlist does not exists
        '409':
          description: Conflict, provided movie id is already in this list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{listId}/movies/{watchlist_has_movie_id}:
    put:
      tags:
      - List's content
      summary: Updates a specified 'WatchlistHasMovie' object
      parameters:
      - name: listId
        in: path
        description: Watchlist id
        required: true
        schema:
          type: integer
          format: int32
      - name: watchlist_has_movie_id
        in: path
        description: Id of element to update inside list
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Element was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistHasMovie'
        '403':
          description: Unauthorized to update element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists
    delete:
      tags:
      - List's content
      summary: Removes specified 'WatchlistHasMovie' object
      parameters:
      - name: listId
        in: path
        description: Watchlist id
        required: true
        schema:
          type: integer
          format: int32
      - name: watchlist_has_movie_id
        in: path
        description: Id of element to delete
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: Element was deleted successfully
        '403':
          description: Unauthorized to remove element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Element does not exists

components:
  schemas:
    UserCredentials:
      type: object
      properties:
        name:
          type: string
          maxLength: 500
        email:
          type: string
          maxLength: 1000
        picture:
          type: string
          maxLength: 5000
        token:
          type: string
          maxLength: 1000
        auth_provider_id:
          type: integer
          format: int32

    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 500
        email:
          type: string
          maxLength: 1000
        picture:
          type: string
          maxLength: 5000
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        jwt:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Watchlist:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 255
        is_default_list:
          type: boolean
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
        deleted:
          type: boolean

    WatchlistHasMovie:
      type: object
      properties:
        id:
          type: integer
          format: int32
        watchlist_id:
          type: integer
          format: int32
        movie_id:
          type: integer
          format: int32
        added_by:
          type: integer
          format: int32
        added_at:
          type: string
          format: date
        seen_at:
          type: string
          format: date
        movie:
          $ref: '#/components/schemas/Movie'

    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tmdb_id:
          type: integer
          format: int32
        title:
          type: string
        original_title:
          type: string
        release_date:
          type: string
          format: date
        runtime:
          type: integer
          format: int32
        synopsis:
          type: string
        rating:
          type: number
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        pictures:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/Cast'
        crew:
          type: array
          items:
            $ref: '#/components/schemas/Crew'

    MoviePost:
      type: object
      properties:
        tmdb_id:
          type: integer
          format: int32
        added_by:
          type: integer
          format: int32

    Cast:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        character:
          type: string
        picture_url:
          type: string
          format: url
        movie_id:
          type: integer
          format: int32

    Crew:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        job:
          type: string
        department:
          type: string
        picture_url:
          type: string
          format: url
        movie_id:
          type: integer
          format: int32

    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    Picture:
      type: object
      properties:
        id:
          type: integer
          format: int32
        movie_id:
          type: integer
          format: int32
        picture_category_id:
          type: integer
          format: int32
        url:
          type: string
          format: uri

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    ValidationErrorsResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
